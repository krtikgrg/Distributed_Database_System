SELECT column_name(s)       //aggregate operators can be present 
FROM table_name
WHERE condition             
GROUP BY column_name(s)
HAVING condition            //aggregate operators can be present

SELECT col1, t1.col2 , col3 ,col4,col5 FROM t1,t2 , t3 , t4  WHERE (a=b) aNd (c=d) and (e=f) AND (a<5 OR a>10) AND (c<5) AND (d<5 OR e>10 OR f>=15) GROUP BY c2, c3, c4 , c5 HAVING (count(c2)>0 OR Sum(c3)=5) AND (MIN(c5)>10);



SELECT col1,
       t1.col2,
       col3,
       col4,
       col5
FROM t1,
     t2,
     t3,
     t4
WHERE (a=b)
  AND (c=d)
  AND (e=f)
  AND (a<5
       OR a>10)
  AND (c<5)
  AND (d<5
       OR e>10
       OR f>=15)
GROUP BY c2,
         c3,
         c4,
         c5
HAVING (count(c2)>0
        OR Sum(c3)=5)
AND (MIN(c5)>10)


relations ['t1', 't2', 't3', 't4']
join_conditions {
     'relation1': ['t1', 't4', 't3'], 
     'attribute1': ['a', 'c', 'e'], 
     'operator': ['=', '=', '='], 
     'relation2': ['t4', 't3', 't2'], 
     'attribute2': ['b', 'd', 'f']
}
all_projects {
     'attribute': ['col1', 'col2', 'col3', 'col4', 'col5', 'c2', 'c3', 'c4', 'c5', 'c2', 'c3', 'c5'], 
     'relation': ['t2', 't1', 't4', 't3', 't3', 't1', 't1', 't1', 't2', 't1', 't1', 't2'], 
     'aggregate_operator': ['', '', '', '', '', '', '', '', '', 'COUNT', 'SUM', 'MIN']
}
aggregates {
     'attribute': ['c2', 'c3', 'c5'], 
     'relation': ['t1', 't1', 't2'], 
     'operator': ['COUNT', 'SUM', 'MIN']
}
group_by {
     'attribute': ['c2', 'c3', 'c4', 'c5'], 
     'relation': ['t1', 't1', 't1', 't2']
}
select_conditions [
     {
          'relation': ['t1', 't1'], 
          'attribute': ['a', 'a'], 
          'operator': ['<', '>'], 
          'value': [5, 10]
     }, {
          'relation': ['t4'], 
          'attribute': ['c'], 
          'operator': ['<'], 
          'value': [5]
     }, {
          'relation': ['t3', 't3', 't2'], 
          'attribute': ['d', 'e', 'f'], 
          'operator': ['<', '>', '>='], 
          'value': [5, 10, 15]
     }
]
having_select [
     {
          'aggregate_operator': ['COUNT', 'SUM'], 
          'relation': ['t1', 't1'], 
          'attribute': ['c2', 'c3'], 
          'operator': ['>', '='], 
          'value': [0, 5]
     }, {
          'aggregate_operator': ['MIN'], 
          'relation': ['t2'], 
          'attribute': ['c5'], 
          'operator': ['>'], 
          'value': [10]
     }
]
project {
     'attribute': ['col1', 'col2', 'col3', 'col4', 'col5'], 
     'relation': ['t2', 't1', 't4', 't3', 't3'], 
     'aggregate_operator': ['', '', '', '', '']
}
META VARIABLES
PROJECT_ALL_ATTRIBUTES 0
HAVING_CLAUSE_EXIST 1
HAVE_AGGREGATES 1
GROUP_BY_CLAUSE_EXIST 1
PART_ONE_PROJECT_ALL 0
SELECT_ALL 0
HAVE_JOIN 1

t1 => col2
t1 => a
t1 => c2
t1 => c4
t1 => c3

t2 => col1
t2 => f
t2 => c5

t3 => col4
t3 => col5
t3 => d
t3 => e

t4 => b
t4 => c
t4 => col3

select b,c,d,f,k,o,p,r from r1,r2,r3,r4,r5 where (a=b) AND (b=c) AND (c=d) AND (d=e);
select b,c,d,l,m from r2,r3,r4 where (b=c) AND (c=d)

For union and leaf nodes, the name of relations are fucked up (not that much)
So when generating the queries , only use attribute names not relation names

even when pushing down the selects and joins in union node, only use attribute names

Update Catalog on sites


use below command for each entry size in bytes and for each cell size in bytes
select distinct column_name,data_type,character_maximum_length from COLUMNS WHERE TABLE_NAME = 'Sites';


GET_RELATION_SIZES     select distinct table_rows from information_schema.TABLES where TABLE_NAME = 'Columns';
above is number of rows in a relation, for HF get this value for all HFs and then add 
same for DHF and for VF pick any one and get that value and this is it

when copying a table, the copied table needs to be added in the tempTables for the new site too